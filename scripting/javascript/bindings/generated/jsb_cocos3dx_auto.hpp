#ifndef __cocos3dx_h__
#define __cocos3dx_h__

#include "jsapi.h"
#include "jsfriendapi.h"


extern JSClass  *jsb_CC3Matrix_class;
extern JSObject *jsb_CC3Matrix_prototype;

JSBool js_cocos3dx_CC3Matrix_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Matrix_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Matrix(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Matrix_extractQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyIntoCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyIntoCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateToLookAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_extractRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyIntoCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_transformHomogeneousVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_scaleBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateOrthoFromFrustumLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_extractRightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateToPointTowards(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_rotateByQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_translateBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_orthonormalizeRotationStartingWith(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyByCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_invert(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_extractTranslation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyIntoCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_rotateBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyIntoCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_invertRigid(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyIntoCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyByCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_transformDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyByCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_transpose(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_isDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateIdentity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_extractUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_extractForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromFrustumLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_transformRay(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromTranslation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyByCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyByCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_setIsDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateZero(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_multiplyBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_leftMultiplyByCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_populateFromCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_isRigid(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_isIdentity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_transformLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_invertAdjoint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_matrixByMultiplying(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_matrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Matrix_CC3Matrix(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3AffineMatrix_class;
extern JSObject *jsb_CC3AffineMatrix_prototype;

JSBool js_cocos3dx_CC3AffineMatrix_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3AffineMatrix_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3AffineMatrix(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3AffineMatrix_extractQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_multiplyIntoCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_leftMultiplyIntoCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_extractRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_multiplyIntoCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_transformHomogeneousVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_extractRightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_orthonormalizeRotationStartingWith(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_leftMultiplyByCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_populateCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_transformDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_multiplyIntoCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_extractTranslation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_populateCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_populateCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_leftMultiplyIntoCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_invertRigid(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_leftMultiplyIntoCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_multiplyByCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_multiplyByCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_transpose(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_extractUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_extractForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_multiplyByCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_leftMultiplyByCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_leftMultiplyByCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_invertAdjoint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_transformLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_matrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3AffineMatrix_CC3AffineMatrix(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ProjectionMatrix_class;
extern JSObject *jsb_CC3ProjectionMatrix_prototype;

JSBool js_cocos3dx_CC3ProjectionMatrix_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ProjectionMatrix_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ProjectionMatrix(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ProjectionMatrix_extractQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_multiplyIntoCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_populateFromCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_leftMultiplyIntoCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_extractRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_multiplyIntoCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_transformHomogeneousVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_extractRightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_orthonormalizeRotationStartingWith(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_leftMultiplyByCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_populateCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_transformDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_multiplyIntoCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_extractTranslation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_populateCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_populateCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_leftMultiplyIntoCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_invertRigid(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_leftMultiplyIntoCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_multiplyByCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_populateFromCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_multiplyByCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_transpose(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_extractUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_extractForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_multiplyByCC3Matrix3x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_leftMultiplyByCC3Matrix4x4(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_leftMultiplyByCC3Matrix4x3(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_invertAdjoint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_transformLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_matrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ProjectionMatrix_CC3ProjectionMatrix(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Cacheable_class;
extern JSObject *jsb_CC3Cacheable_prototype;

JSBool js_cocos3dx_CC3Cacheable_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Cacheable_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Cacheable(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Cacheable_getName(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Identifiable_class;
extern JSObject *jsb_CC3Identifiable_prototype;

JSBool js_cocos3dx_CC3Identifiable_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Identifiable_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Identifiable(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Identifiable_deriveNameFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_resetTagAllocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_initWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_getUserData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_getName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_initUserData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_nextTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_setName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_copyWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_getTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_copy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_shouldIncludeInDeepCopy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_setUserData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_fullDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_setTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_copyUserDataFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_getNameSuffix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_getInstanceCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Identifiable_CC3Identifiable(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Node_class;
extern JSObject *jsb_CC3Node_prototype;

JSBool js_cocos3dx_CC3Node_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Node_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Node(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Node_defaultBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getSkeletalScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getStructureDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addChildFromBackgroundThread(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getNodeNamed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getPerformanceStatistics(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldShadowBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRootAncestor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeAllDirectionMarkers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDisableDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldBlendAtFullOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setPodUserDataSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRotationAxis(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldAddShadowVolumeEndCapsOnlyWhenNeeded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeTransformListener(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isLightProbe(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_createBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_touchableNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAnimationOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldAllowTouchableWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawDescriptor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeAllTransformListeners(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyTargetLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyEffectNamedFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isMeshNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_markAddEnd(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isDescendantOf(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getProjectedLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_hide(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isCascadeOpacityEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setParent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_drawWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeAnimationState(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTransformRigid(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAnimationOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableScaleAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRotationAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_hasShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyTargetLocationAsGlobal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_hasShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAllLocationAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_buildGlobalRotationMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doesIntersectNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAnimationStateOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_markAnimationDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addCopiesOfChildrenFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldAutotargetCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldBlendAtFullOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAllScaleAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldAutotargetCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShadowLagFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRotator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDisplayedOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getTargettingRotator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setPerformanceStatistics(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_freezeIfInanimateOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldUseLightProbes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_closestNodeIntersectedByGlobalRay(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setIsRunning(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setDepthFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShaderContext(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDirectionMarkers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addChild(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimationFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDisableDepthMask(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_markBoundingVolumeDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowLagFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getLineSmoothingHint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAllQuaternionAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addDirectionMarkerColored(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setDecalOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAnimationOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_deleteGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyRotationTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_selectShaders(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldContributeToParentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getNodeTagged(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_resumeAllActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_notifyTransformListeners(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldAllowTouchableWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldUpdateToTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_rotationallyRestrictTargetLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getProjectedPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nodeWasDestroyed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setCascadeColorEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_wasRemoved(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setNormalScalingMethod(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldLogIntersectionMisses(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getTargettingConstraint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateAfterTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setExpectsVerticallyFlippedTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateDisplayedOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setIsAnimationEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getWireframeBoxNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setPodTargetIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_flipTexturesHorizontally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setReflectivity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_asOrientingWrapper(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawAllDescriptors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldUseFixedBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldStopActionsWhenRemoved(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldReverseForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldCastShadowsWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_freezeAllInanimatesOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableLocationAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAllAnimationOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowVolumeForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawAllLocalContentWireframeBoxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldTrackTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setDecalOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldAutoremoveWhenEmpty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldInheritTouchability(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShadowVolumeVertexOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableQuaternionAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyScalingTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTargettingConstraintLocal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_touchDisableAll(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalHomogeneousPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_expectsVerticallyFlippedTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_stopActionByTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldTrackTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_markAddBegin(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_bindRestPose(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableQuaternionAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_notifyDestructionListeners(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getTouchableNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateBeforeTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldUseLightProbes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_cleanupActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldUseClockwiseFrontFaceWinding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShaderContext(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawAllDescriptors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setUniformScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_rotateByQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_runAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getReferenceUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDescriptorNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doesIntersectFrustum(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_describeAnimationStateForFrames(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawInClipSpace(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeAllChildren(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldUseLighting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isAnimationEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isRunning(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getParent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setTargetLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_asCameraTrackingWrapper(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_transformAndDrawWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_animationBlendingWeightOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setSkeletalBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldShadowBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getBoundingBoxRelativeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateFromAnimationState(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setAnimationBlendingWeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowLagCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setRotationAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_reattachBonesFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAllLocationAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isShadowVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTrackingForBumpMapping(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_flattenInto(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_appendStructureDescriptionTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldIgnoreRayIntersection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setReferenceUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableLocationAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isAnimationEnabledOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldCullBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_pauseAllActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawAllLocalContentWireframeBoxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isCascadeColorEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShadowExpansionLimitFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldCullFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_show(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAllAnimationOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_resetTagAllocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setCascadeOpacityEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getChildren(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getSoftBodyNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getNormalScalingMethod(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyTargetLocationAsLocal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setIsOpaque(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldAddShadowVolumeEndCapsOnlyWhenNeeded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyLocalTransformsTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimationState(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setLineSmoothingHint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldLogIntersections(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRenderStreamGroupMarker(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAllAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldCullFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimationFromFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_hasLocalContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyEffectNamedFromRez(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_remove(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_didRemoveDescendant(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldCastShadowsWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_descendantDidModifySequencingCriteria(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_flipNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawAllBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTouchable(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isOpaque(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDepthFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldShadowFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isUniformlyScaledGlobally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isBillboard(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShadowLagCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldUseClockwiseFrontFaceWinding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getLocationOfGlobalRayIntesection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nextTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setTargettingConstraint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldCullBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setGlobalLightPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldStopActionsWhenRemoved(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimationFromFrameWithBaseTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_numberOfRunningActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_releaseRedundantContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_convertRotatorGlobalToLocal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldSmoothLines(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_describeCurrentAnimationState(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isBasePODNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_touchEnableAll(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getInitialDescriptorColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getZOrder(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_rotateByAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimationFromFrameWithTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAndLocalizeChild(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalRightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalLocationOfGlobalRayIntesection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_translateBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDecalOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doesIntersectBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_animationTimeOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setCameraDistanceProduct(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nodeWasTransformed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyTranslationTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDisableDepthMask(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setProjectedLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setIsTrackingForBumpMapping(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateTargetLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addTransformListener(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_flipTexturesVertically(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_createBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getCameraDistanceProduct(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_buildLocalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_ensureRigidSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getActiveCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAllQuaternionAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShadowOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_stopAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getBoundingVolumePadding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isUniformlyScaledLocally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDescriptorName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldCastShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isTrackingTargetDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAnimationStateForAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_wasAdded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldAutoremoveWhenEmpty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldApplyOpacityAndColorToMeshContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDirectionalRotator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldLogIntersections(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAnimationState(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_establishAnimationFrameAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setBoundingVolumePadding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateBeforeChildren(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShininess(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setLocalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getAnimationStates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawAllWireframeBoxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeChild(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getTargetLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldShadowFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_buildGlobalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldDrawAllWireframeBoxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAnimationInResource(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_processUpdateAfterTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_flatten(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeShaders(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldRotateToTargetLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getReflectivity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowVolumeVertexOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_applyRotatorTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldIgnoreRayIntersection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getPodTargetIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getMutableRotator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_asTrackingWrapper(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldCastShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDecalOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getPodUserDataSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_updateAfterChildren(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldUseSmoothShading(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldUseSmoothShading(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShininess(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_buildGlobalTransformMatrixInverted(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getInitialDirectionMarkerColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_deleteBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_stopAllActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableScaleAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShadowOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getUpDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getActionByTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_checkDrawingOrder(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addChildNow(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_disableAllAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doesIntersectGlobalRay(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_processUpdateBeforeTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalRotationMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDisableDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldLogIntersectionMisses(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addAxesDirectionMarkers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getShadowExpansionLimitFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawDescriptor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getWireframeBoxName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_prewarmForShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_hasTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getUniformScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_containsAnimationOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldSmoothLines(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_removeAnimationTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_createSkinnedBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setRotationAxis(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getLocalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_retainVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_createGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_enableAllScaleAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawInClipSpace(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_rotateBy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalTransformMatrixInverted(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_draw(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldUseLighting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_didAddDescendant(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_checkCameraTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getGlobalLightPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldApplyOpacityAndColorToMeshContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setRotator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_linkToPODNodes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldDrawAllBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_addDirectionMarker(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_isShadowVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_doNotBufferVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_containsAnimation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_asBumpMapLightTrackingWrapper(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_hasSoftBodyContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_shouldUseFixedBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getInitialWireframeBoxColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nodesIntersectedByGlobalRay(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setShouldInheritTouchability(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_node(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setDirectionMarkerColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setDescriptorFontSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_descriptorFontSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_quaternionFromRatation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getWireframeBoxColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nodeWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_setWireframeBoxColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_nodeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_getDirectionMarkerColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Node_CC3Node(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3BoundingVolume_class;
extern JSObject *jsb_CC3BoundingVolume_prototype;

JSBool js_cocos3dx_CC3BoundingVolume_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3BoundingVolume_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3BoundingVolume(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3BoundingVolume_doesIntersectSphere(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_isInFrontOfPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_getPlanes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_markDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_doesIntersectRay(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_doesIntersectConvexHullOf(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_shouldIgnoreRayIntersection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_doesIntersectLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_doesIntersect(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_getGlobalLocationOfGlobalRayIntesection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_setShouldLogIntersections(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_getPlaneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_isDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_setShouldIgnoreRayIntersection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_logIntersection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_shouldLogIntersections(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_updateIfNeeded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_fullDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_shouldLogIntersectionMisses(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_setShouldLogIntersectionMisses(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_boundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoundingVolume_CC3BoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Camera_class;
extern JSObject *jsb_CC3Camera_prototype;

JSBool js_cocos3dx_CC3Camera_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Camera_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Camera(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Camera_setIsUsingParallelProjection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_unprojectPoint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_shouldReverseForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getFovRatios(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getFieldOfView(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getProjectLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getOrientedFieldOfViewAspect(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_closeViewWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_ensureAtRootAncestor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getFarClippingDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setFrustum(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_closeProjectionWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getProjectionMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setFieldOfView(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_shouldClipToViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_loadViewMatrixWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getNearClippingDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getGlobalScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_loadProjectionMatrixWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setFarClippingDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_moveWithDurationLookAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setShouldClipToViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_isOpen(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_calculateLocationToShowAllOf(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getFieldOfViewOrientation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setHasInfiniteDepthOfField(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_applyScalingTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_openViewWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_openWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_closeWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_isUsingParallelProjection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setFieldOfViewOrientation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_moveToShowAllOf(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_projectNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_moveWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getFieldOfViewAspectOrientation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setFieldOfViewAspectOrientation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_hasInfiniteDepthOfField(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_moveToShowAllOfLookAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_isCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_markProjectionDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getViewMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_setNearClippingDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_fullDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_buildProjection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_openProjectionWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_ensureSceneUpdated(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getEffectiveFieldOfView(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_getFrustum(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_unprojectPointForMy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Camera_CC3Camera(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Frustum_class;
extern JSObject *jsb_CC3Frustum_prototype;

JSBool js_cocos3dx_CC3Frustum_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Frustum_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Frustum(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Frustum_getTopPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setBottom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_fullDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setTop(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getPlanes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setIsUsingParallelProjection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFarBottomRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getPlaneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFarTopRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getRightPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setFar(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getNearBottomLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getLeftPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_populateRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFarTopLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getTop(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getBottom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFarBottomLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFar(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setNear(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getInfiniteProjectionMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getNearBottomRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_isUsingParallelProjection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getBottomPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getNearPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getNear(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_setRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFiniteProjectionMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getNearTopLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getNearTopRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_getFarPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_frustum(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Frustum_CC3Frustum(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3EnvironmentNode_class;
extern JSObject *jsb_CC3EnvironmentNode_prototype;

JSBool js_cocos3dx_CC3EnvironmentNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3EnvironmentNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3EnvironmentNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3EnvironmentNode_setTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_initWithTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_isLightProbe(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_getTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_initWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_nodeWithTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3EnvironmentNode_CC3EnvironmentNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3LightProbe_class;
extern JSObject *jsb_CC3LightProbe_prototype;

JSBool js_cocos3dx_CC3LightProbe_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3LightProbe_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3LightProbe(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3LightProbe_getDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightProbe_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightProbe_setDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightProbe_isLightProbe(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightProbe_nodeWithTexture(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Light_class;
extern JSObject *jsb_CC3Light_prototype;

JSBool js_cocos3dx_CC3Light_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Light_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Light(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Light_setDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_hasShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_removeShadow(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_shouldReverseForwardDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_updateShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_applyPositionWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_configureStencilParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getShadowCastingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_isLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setCameraShadowVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_addShadow(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_applyColorWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getAttenuation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setShadowIntensityFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getStencilledShadowPainter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getGlobalHomogeneousPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getCameraShadowVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_checkShadowCastingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_paintStenciledShadowsWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getSpotExponent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setShouldCastShadowsWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_applyAttenuationWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_turnOnWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getShadowIntensityFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_addShadowNow(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_cleanupShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setIsDirectionalOnly(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_turnOffWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_shouldCopyLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setShadowCastingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getGlobalScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_drawShadowsWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_nextLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_isDirectionalOnly(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_addShadowFromBackgroundThread(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_returnLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_applyScalingTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setShouldCopyLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setSpotExponent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getSpotCutoffAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_initWithLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_checkCameraShadowVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setAttenuation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_updateRelativeIntensityFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_shouldCastShadowsWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setSpotCutoffAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_initWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_cleanupStencilParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_checkStencilledShadowPainter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setStencilledShadowPainter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_applyDirectionWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_lightWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getLightPoolStartIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_setLightPoolStartIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_getLightCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_nodeWithLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_lightWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_lightWithLightIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_disableReservedLightsWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Light_CC3Light(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3LightCameraBridgeVolume_class;
extern JSObject *jsb_CC3LightCameraBridgeVolume_prototype;

JSBool js_cocos3dx_CC3LightCameraBridgeVolume_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3LightCameraBridgeVolume_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3LightCameraBridgeVolume(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_getLightPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_setLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_getLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_isLightInFrontOfPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_nodeWasDestroyed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_nodeWasTransformed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_areAllVerticesInFrontOf(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LightCameraBridgeVolume_CC3LightCameraBridgeVolume(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ShadowCastingVolume_class;
extern JSObject *jsb_CC3ShadowCastingVolume_prototype;

JSBool js_cocos3dx_CC3ShadowCastingVolume_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ShadowCastingVolume_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ShadowCastingVolume(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ShadowCastingVolume_addPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_buildPlanes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_getPlaneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_checkPlaneEdge(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_checkPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_addUniqueVertex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_getPlanes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_boundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowCastingVolume_CC3ShadowCastingVolume(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3CameraShadowVolume_class;
extern JSObject *jsb_CC3CameraShadowVolume_prototype;

JSBool js_cocos3dx_CC3CameraShadowVolume_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3CameraShadowVolume_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3CameraShadowVolume(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3CameraShadowVolume_getTopRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getRightPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getTopPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getBottomLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_buildPlanes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getBottomPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getNearPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_buildVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getBottomRight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getLeftPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getFarPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getPlaneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getTopLeft(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_getPlanes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CameraShadowVolume_boundingVolume(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3LocalContentNode_class;
extern JSObject *jsb_CC3LocalContentNode_prototype;

JSBool js_cocos3dx_CC3LocalContentNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3LocalContentNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3LocalContentNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3LocalContentNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_setShouldDrawAllLocalContentWireframeBoxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_checkDrawingOrder(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getBoundingBoxRelativeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getZOrder(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getLocalContentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getLocalContentCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getLocalContentWireframeBoxName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_shouldDrawLocalContentWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getLocalContentBoundingBoxRelativeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_shouldContributeToParentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getGlobalLocalContentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getGlobalLocalContentCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getInitialDescriptorColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_hasLocalContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_shouldDrawAllLocalContentWireframeBoxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_setShouldDrawLocalContentWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getInitialLocalContentWireframeBoxColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getLocalContentWireframeBoxNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_setLocalContentWireframeBoxColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_getLocalContentWireframeBoxColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3LocalContentNode_CC3LocalContentNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3MeshNode_class;
extern JSObject *jsb_CC3MeshNode_prototype;

JSBool js_cocos3dx_CC3MeshNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3MeshNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3MeshNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3MeshNode_populateAsTriangle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_defaultBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldCullFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setNormalScalingMethod(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsHollowConeWithRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getNormalScalingMethod(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexBitangent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_addShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getPodMaterialIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldApplyOpacityToColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldUseSmoothShading(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_addTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_ensureMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setIsOpaque(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexBoneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsCubeMappedSolidBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDrawingMode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexBoneIndicesAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_applyShaderProgramWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldApplyOpacityAndColorToMeshContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldDisableDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldBlendAtFullOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_alignTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_makeMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getLineSmoothingHint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_flipTexturesHorizontally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexColorType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexColor4F(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateLightPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexColor4B(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_prepareParametricMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldCullFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldSmoothLines(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getLocalContentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_findFirstGlobal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShininess(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setDrawingMode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDeformedFaceNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldDrawLowAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldCastShadowsWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_removeLocalShaders(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_flipVerticallyTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldCastShadowsWhenInvisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDeformedFaceCenterAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_flipNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexTexCoord2FForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureColoring(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_drawMeshWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setDecalOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getMaterial(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureNormalization(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_isOpaque(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_applyEffectNamedFromRez(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDeformedFaceAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_applyEffectNamedFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_isMeshNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexContentTypes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setLineSmoothingHint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldUseLightProbes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getEffectiveNormalScalingMethod(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceCenterAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceCountFromVertexIndexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setMaterial(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_drawWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldUseClockwiseFrontFaceWinding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexBoneWeightsAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setExpectsVerticallyFlippedTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceFromIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsLineStripWith(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_selectShaders(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsSolidBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldCullBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setGlobalLightPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_selectShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getLocalContentCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_expectsVerticallyFlippedTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexColor4FAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_releaseRedundantContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexBitangentAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_expectsVerticallyFlippedTextureInTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setPodMaterialIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDecalOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexContentTypes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_hasSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexHomogeneousLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setTextureRectangle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getTextureCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_alignMaterialAndMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexTextureCoordinatesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldUseLightProbes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsCenteredRectangleWithSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexNormalsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldDrawLowAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setReflectivity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexBoneIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_alignTextureUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexBitangentsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexColorsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldUseClockwiseFrontFaceWinding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShaderContext(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureDepthTesting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_isUsingGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexHomogeneousLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldBlendAtFullOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldUseSmoothShading(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getShininess(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getTextureForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsSphereWithRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexIndexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldDisableDepthMask(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexTexCoord2F(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_prewarmForShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureDrawingParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDeformedVertexLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexNormal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldDrawInClipSpace(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexTangentAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_findFirst(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_applyMaterialWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexWeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getTextureRectangle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldUseLighting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDecalOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexIndexAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setDecalOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDeformedFacePlaneAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceIndicesAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_repeatTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexWeightForBoneInfluence(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexBoneWeightsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_removeShaders(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsWireBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_cleanupDrawingParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldDisableDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureLineProperties(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexColor4BAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_makeMaterial(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexTangent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFacePlaneAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexIndexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setDepthFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_hasTexturePremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_removeAllTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getDepthFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getShaderContext(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldSmoothLines(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexBoneIndexType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexTangentsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_expectsVerticallyFlippedTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsRectangleWithSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexLocationsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setVertexLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldDisableDepthMask(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_createGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldDrawInClipSpace(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_hasTextureAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexBoneIndicesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_populateAsDiskWithRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_flipTexturesVertically(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_deleteGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexBoneIndexForBoneInfluence(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexTextureCoordinatesGLBufferForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getReflectivity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_hasRigidSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getGlobalLightPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_moveMeshOriginTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldApplyOpacityAndColorToMeshContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_moveMeshOriginToCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexTexCoord2FAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_isDrawingPointSprites(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getVertexIndexCountFromFaceCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setShouldCullBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getTextureRectangleForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_updateVertexIndicesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureDecalParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_configureFaceCulling(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_getFaceNeighboursAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_retainVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_shouldUseLighting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_doNotBufferVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_flipHorizontallyTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3MeshNode_CC3MeshNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3BitmapFontConfiguration_class;
extern JSObject *jsb_CC3BitmapFontConfiguration_prototype;

JSBool js_cocos3dx_CC3BitmapFontConfiguration_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3BitmapFontConfiguration_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3BitmapFontConfiguration(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getTextureSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getKerningBetween(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getPadding(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getBaseline(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getAtlasName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getCommonHeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_initFromFontFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_getCharacterSpecFor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_configurationFromFontFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_clearFontConfigurations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapFontConfiguration_CC3BitmapFontConfiguration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3BitmapLabelNode_class;
extern JSObject *jsb_CC3BitmapLabelNode_prototype;

JSBool js_cocos3dx_CC3BitmapLabelNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3BitmapLabelNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3BitmapLabelNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3BitmapLabelNode_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getFontFileName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_setTessellation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getBaseline(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_setLabelString(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_setFontFileName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getTessellation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getRelativeOrigin(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_populateLabelMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_populateAsBitmapFontLabelFromString(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_setRelativeOrigin(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getLineHeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_setLineHeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_getLabelString(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BitmapLabelNode_CC3BitmapLabelNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PlaneNode_class;
extern JSObject *jsb_CC3PlaneNode_prototype;

JSBool js_cocos3dx_CC3PlaneNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PlaneNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PlaneNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PlaneNode_getPlane(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PlaneNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3LineNode_class;
extern JSObject *jsb_CC3LineNode_prototype;

JSBool js_cocos3dx_CC3LineNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3LineNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3LineNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);

extern JSClass  *jsb_CC3SimpleLineNode_class;
extern JSObject *jsb_CC3SimpleLineNode_prototype;

JSBool js_cocos3dx_CC3SimpleLineNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3SimpleLineNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3SimpleLineNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3SimpleLineNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SimpleLineNode_setLineStart(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SimpleLineNode_getLineEnd(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SimpleLineNode_getLineStart(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SimpleLineNode_setLineEnd(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3BoxNode_class;
extern JSObject *jsb_CC3BoxNode_prototype;

JSBool js_cocos3dx_CC3BoxNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3BoxNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3BoxNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3BoxNode_node(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3BoxNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3TouchBox_class;
extern JSObject *jsb_CC3TouchBox_prototype;

JSBool js_cocos3dx_CC3TouchBox_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3TouchBox_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3TouchBox(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3TouchBox_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_getNameSuffix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_setBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_setParent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_shouldContributeToParentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_updateAfterTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_getBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_populateBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_getParentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchBox_prepareParametricMesh(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3SphereNode_class;
extern JSObject *jsb_CC3SphereNode_prototype;

JSBool js_cocos3dx_CC3SphereNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3SphereNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3SphereNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3SphereNode_defaultBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SphereNode_node(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SphereNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ClipSpaceNode_class;
extern JSObject *jsb_CC3ClipSpaceNode_prototype;

JSBool js_cocos3dx_CC3ClipSpaceNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ClipSpaceNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ClipSpaceNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ClipSpaceNode_defaultBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ClipSpaceNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ClipSpaceNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ClipSpaceNode_nodeWithTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ClipSpaceNode_nodeWithColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Backdrop_class;
extern JSObject *jsb_CC3Backdrop_prototype;

JSBool js_cocos3dx_CC3Backdrop_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Backdrop_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Backdrop(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Backdrop_node(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Backdrop_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Backdrop_nodeWithTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Backdrop_nodeWithColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Fog_class;
extern JSObject *jsb_CC3Fog_prototype;

JSBool js_cocos3dx_CC3Fog_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Fog_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Fog(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Fog_setPerformanceHint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_getAttenuationMode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_setEndDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_setDensity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_setAttenuationMode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_getPerformanceHint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_getEndDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_getDensity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_getStartDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_setStartDistance(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Fog_fog(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3VertexArray_class;
extern JSObject *jsb_CC3VertexArray_prototype;

JSBool js_cocos3dx_CC3VertexArray_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3VertexArray_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3VertexArray(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3VertexArray_getBufferTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setShouldNormalizeContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_createGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_bindContentToAttributeAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getSemantic(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_resetTagAllocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getElementSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_copyVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_shouldAllowVertexBuffering(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_deleteGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setElementOffset(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setElementsFromCPODData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_updateGLBufferStartingAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getAllocatedVertexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_releaseRedundantContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getElementType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_shouldNormalizeContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setShouldReleaseRedundantContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_isUsingGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setShouldAllowVertexBuffering(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getBufferID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getElementOffset(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_describeVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_nextTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getAvailableVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setVertexStride(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setAllocatedVertexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setBufferID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_interleaveWith(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setElementSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_updateGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setBufferUsage(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setElementType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getVertexStride(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getAddressOfElement(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setSemantic(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getElementLength(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_defaultSemantic(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_setVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_shouldReleaseRedundantContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_getBufferUsage(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_vertexArrayWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_vertexArray(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_vertexArrayWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3VertexArray_CC3VertexArray(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Mesh_class;
extern JSObject *jsb_CC3Mesh_prototype;

JSBool js_cocos3dx_CC3Mesh_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Mesh_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Mesh(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Mesh_populateAsTriangle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_drawVerticesWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_copyVertexAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_resetTagAllocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_ensureCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsHollowConeWithRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexBitangent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getAllocatedVertexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setTextureRectangle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsSphereWithRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getDrawingMode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setExpectsVerticallyFlippedTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsCubeMappedSolidBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneIndicesAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getTextureCoordinatesForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_flipTexturesHorizontally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexColorType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexColor4F(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_shouldInterleaveVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexColor4B(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_vertexTexCoord2FAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexBitangentsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setDrawingMode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_repeatTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_alignTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexIndicesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexArrayForSemantic(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_deleteGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexPointSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getNameSuffix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_flipNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexTexCoord2FForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updatePointSizesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_shouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getCapacityExpansionFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexTextureCoordinatesGLBufferForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_removeTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexContentTypes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceCountFromVertexIndexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_drawWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_copyVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneWeightsAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_nextTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_moveMeshOriginToCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceFromIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsLineStripWith(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsSolidBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexStride(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setCapacityExpansionFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_flipVerticallyTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getAllocatedVertexIndexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_releaseRedundantContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexStride(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBitangentAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getUncachedFaceIndicesAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_copyVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexContentTypes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexHomogeneousLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_expectsVerticallyFlippedTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getTextureRectangleForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexTextureCoordinatesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsCenteredRectangleWithSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexNormalsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceCenterAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexBoneIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setAllocatedVertexIndexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexColorsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_isUsingGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexHomogeneousLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_interleavedVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexColor4FAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getCenterOfGeometry(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexIndexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setExpectsVerticallyFlippedTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexTexCoord2F(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateGLBuffersStartingAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexNormal(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexTangentAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexBitangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexWeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getTextureRectangle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_ensureVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexIndexAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getTextureCoordinatesArrayCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getTextureCoordinatesNamed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceIndicesAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setShouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexWeightForBoneInfluence(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexBoneWeightsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setShouldInterleaveVertices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsWireBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexColor4BAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexTangent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFacePlaneAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexIndexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexColors(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_removeAllTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_bindWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_findFirst(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexBoneWeights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_addTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneIndexType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexTangentsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_doNotBufferVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexIndices(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexLocationsGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_createGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_drawFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_expectsVerticallyFlippedTextureInTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_drawVerticesFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateVertexBoneIndicesGLBuffer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsDiskWithRadius(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_flipTexturesVertically(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexStride(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setAllocatedVertexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexBoneIndexForBoneInfluence(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_ensureVertexCapacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_populateAsRectangleWithSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexLocations(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_moveMeshOriginTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexTexCoord2FAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexIndexCountFromFaceCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_createVertexContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getVertexPointSizeAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexTangents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_hasVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_updateGLBuffers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexPointSizes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_getFaceNeighboursAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_retainVertexNormals(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_flipHorizontallyTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_setVertexTextureCoordinates(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_meshWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_mesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_meshWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Mesh_CC3Mesh(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3SoftBodyNode_class;
extern JSObject *jsb_CC3SoftBodyNode_prototype;

JSBool js_cocos3dx_CC3SoftBodyNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3SoftBodyNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3SoftBodyNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3SoftBodyNode_getSoftBodyNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SoftBodyNode_addCopiesOfChildrenFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SoftBodyNode_getSkeletalScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SoftBodyNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SoftBodyNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3SkinMeshNode_class;
extern JSObject *jsb_CC3SkinMeshNode_prototype;

JSBool js_cocos3dx_CC3SkinMeshNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3SkinMeshNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3SkinMeshNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3SkinMeshNode_defaultBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_setDeformedFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getSkinSectionForVertexIndexAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_setSkeletalBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_drawMeshWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getDeformedFaceAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_boneWasTransformed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getSkinSections(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getDeformedFaceCenterAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_reattachBonesFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getSkeletalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getDeformedVertexLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_createBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_hasSoftBodyContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_hasRigidSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getSkinSectionForFaceIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_addShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getDeformedFacePlaneAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_createSkinnedBoundingVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getSkeletalTransformMatrixInverted(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_setShouldCacheFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getDeformedFaceNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_hasSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_getDeformedFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_ensureRigidSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinMeshNode_CC3SkinMeshNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3SkinSection_class;
extern JSObject *jsb_CC3SkinSection_prototype;

JSBool js_cocos3dx_CC3SkinSection_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3SkinSection_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3SkinSection(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3SkinSection_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_copyForNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getVertexStart(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_containsVertexIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getBoneCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getTransformMatrixForBoneAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_reattachBonesFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getDeformedVertexLocationAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_drawVerticesOfMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getBoneAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_hasRigidSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_addBone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_initForNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_getBones(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_fullDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_hasSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_setVertexCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_setVertexStart(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_skinSectionForNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3SkinSection_CC3SkinSection(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Bone_class;
extern JSObject *jsb_CC3Bone_prototype;

JSBool js_cocos3dx_CC3Bone_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Bone_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Bone(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Bone_hasSoftBodyContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_cacheRestPoseMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_bindRestPose(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_ensureRigidSkeleton(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_getSkeletalTransformMatrix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_getRestPoseSkeletalTransformMatrixInverted(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Bone_CC3Bone(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Action_class;
extern JSObject *jsb_CC3Action_prototype;

JSBool js_cocos3dx_CC3Action_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Action_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Action(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Action_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Action_getTargetNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Action_CC3Action(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionInterval_class;
extern JSObject *jsb_CC3ActionInterval_prototype;

JSBool js_cocos3dx_CC3ActionInterval_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionInterval_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionInterval(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionInterval_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInterval_getTargetNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInterval_repeatForever(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInterval_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInterval_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTransformVector_class;
extern JSObject *jsb_CC3ActionTransformVector_prototype;

JSBool js_cocos3dx_CC3ActionTransformVector_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTransformVector_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTransformVector(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTransformVector_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformVector_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTransformBy_class;
extern JSObject *jsb_CC3ActionTransformBy_prototype;

JSBool js_cocos3dx_CC3ActionTransformBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTransformBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTransformBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);

extern JSClass  *jsb_CC3ActionMoveBy_class;
extern JSObject *jsb_CC3ActionMoveBy_prototype;

JSBool js_cocos3dx_CC3ActionMoveBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionMoveBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionMoveBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionMoveBy_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveBy_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveBy_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateBy_class;
extern JSObject *jsb_CC3ActionRotateBy_prototype;

JSBool js_cocos3dx_CC3ActionRotateBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateBy_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateBy_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateBy_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3RepeatForever_class;
extern JSObject *jsb_CC3RepeatForever_prototype;

JSBool js_cocos3dx_CC3RepeatForever_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3RepeatForever_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3RepeatForever(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3RepeatForever_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_setInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_step(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_getInnerAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_isDone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3RepeatForever_CC3RepeatForever(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateForever_class;
extern JSObject *jsb_CC3ActionRotateForever_prototype;

JSBool js_cocos3dx_CC3ActionRotateForever_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateForever_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateForever(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateForever_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateForever_initWithRotationRate(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateForever_actionWithRotationRate(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionScaleBy_class;
extern JSObject *jsb_CC3ActionScaleBy_prototype;

JSBool js_cocos3dx_CC3ActionScaleBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionScaleBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionScaleBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionScaleBy_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleBy_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleBy_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleBy_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleBy_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateByAngle_class;
extern JSObject *jsb_CC3ActionRotateByAngle_prototype;

JSBool js_cocos3dx_CC3ActionRotateByAngle_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateByAngle_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateByAngle(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateByAngle_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateByAngle_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateByAngle_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateByAngle_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateByAngle_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateByAngle_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateByAngle_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateOnAxisForever_class;
extern JSObject *jsb_CC3ActionRotateOnAxisForever_prototype;

JSBool js_cocos3dx_CC3ActionRotateOnAxisForever_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateOnAxisForever_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateOnAxisForever(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateOnAxisForever_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateOnAxisForever_initWithRotationRate(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateOnAxisForever_actionWithRotationRate(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTransformTo_class;
extern JSObject *jsb_CC3ActionTransformTo_prototype;

JSBool js_cocos3dx_CC3ActionTransformTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTransformTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTransformTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTransformTo_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformTo_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformTo_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformTo_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTransformTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionMoveTo_class;
extern JSObject *jsb_CC3ActionMoveTo_prototype;

JSBool js_cocos3dx_CC3ActionMoveTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionMoveTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionMoveTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionMoveTo_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveTo_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateTo_class;
extern JSObject *jsb_CC3ActionRotateTo_prototype;

JSBool js_cocos3dx_CC3ActionRotateTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateTo_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateTo_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateTo_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionScaleTo_class;
extern JSObject *jsb_CC3ActionScaleTo_prototype;

JSBool js_cocos3dx_CC3ActionScaleTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionScaleTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionScaleTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionScaleTo_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleTo_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionScaleTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateToAngle_class;
extern JSObject *jsb_CC3ActionRotateToAngle_prototype;

JSBool js_cocos3dx_CC3ActionRotateToAngle_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateToAngle_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateToAngle(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateToAngle_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToAngle_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToAngle_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToAngle_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToAngle_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToAngle_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToAngle_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateToLookTowards_class;
extern JSObject *jsb_CC3ActionRotateToLookTowards_prototype;

JSBool js_cocos3dx_CC3ActionRotateToLookTowards_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateToLookTowards_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateToLookTowards(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateToLookTowards_getTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToLookTowards_setTargetVector(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToLookTowards_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToLookTowards_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRotateToLookAt_class;
extern JSObject *jsb_CC3ActionRotateToLookAt_prototype;

JSBool js_cocos3dx_CC3ActionRotateToLookAt_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRotateToLookAt_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRotateToLookAt(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRotateToLookAt_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToLookAt_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRotateToLookAt_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionMoveDirectionallyBy_class;
extern JSObject *jsb_CC3ActionMoveDirectionallyBy_prototype;

JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionMoveDirectionallyBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionMoveDirectionallyBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_getTargetDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionMoveDirectionallyBy_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionMoveForwardBy_class;
extern JSObject *jsb_CC3ActionMoveForwardBy_prototype;

JSBool js_cocos3dx_CC3ActionMoveForwardBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionMoveForwardBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionMoveForwardBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionMoveForwardBy_getTargetDirection(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionMoveRightBy_class;
extern JSObject *jsb_CC3ActionMoveRightBy_prototype;

JSBool js_cocos3dx_CC3ActionMoveRightBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionMoveRightBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionMoveRightBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionMoveRightBy_getTargetDirection(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionMoveUpBy_class;
extern JSObject *jsb_CC3ActionMoveUpBy_prototype;

JSBool js_cocos3dx_CC3ActionMoveUpBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionMoveUpBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionMoveUpBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionMoveUpBy_getTargetDirection(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTintTo_class;
extern JSObject *jsb_CC3ActionTintTo_prototype;

JSBool js_cocos3dx_CC3ActionTintTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTintTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTintTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTintTo_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintTo_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintTo_setTargetColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintTo_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintTo_getTargetColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTintAmbientTo_class;
extern JSObject *jsb_CC3ActionTintAmbientTo_prototype;

JSBool js_cocos3dx_CC3ActionTintAmbientTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTintAmbientTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTintAmbientTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTintAmbientTo_setTargetColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintAmbientTo_getTargetColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTintDiffuseTo_class;
extern JSObject *jsb_CC3ActionTintDiffuseTo_prototype;

JSBool js_cocos3dx_CC3ActionTintDiffuseTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTintDiffuseTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTintDiffuseTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTintDiffuseTo_setTargetColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintDiffuseTo_getTargetColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTintSpecularTo_class;
extern JSObject *jsb_CC3ActionTintSpecularTo_prototype;

JSBool js_cocos3dx_CC3ActionTintSpecularTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTintSpecularTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTintSpecularTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTintSpecularTo_setTargetColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintSpecularTo_getTargetColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionTintEmissionTo_class;
extern JSObject *jsb_CC3ActionTintEmissionTo_prototype;

JSBool js_cocos3dx_CC3ActionTintEmissionTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionTintEmissionTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionTintEmissionTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionTintEmissionTo_setTargetColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionTintEmissionTo_getTargetColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionAnimate_class;
extern JSObject *jsb_CC3ActionAnimate_prototype;

JSBool js_cocos3dx_CC3ActionAnimate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionAnimate_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionAnimate(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionAnimate_isReversed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_setIsReversed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_getTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_asActionLimitedFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimate_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionAnimationBlendingFadeTrackTo_class;
extern JSObject *jsb_CC3ActionAnimationBlendingFadeTrackTo_prototype;

JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_getTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingFadeTrackTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionAnimationCrossFade_class;
extern JSObject *jsb_CC3ActionAnimationCrossFade_prototype;

JSBool js_cocos3dx_CC3ActionAnimationCrossFade_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionAnimationCrossFade_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionAnimationCrossFade(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_getToTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_getFromTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationCrossFade_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionAnimationBlendingSetTrackTo_class;
extern JSObject *jsb_CC3ActionAnimationBlendingSetTrackTo_prototype;

JSBool js_cocos3dx_CC3ActionAnimationBlendingSetTrackTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionAnimationBlendingSetTrackTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionAnimationBlendingSetTrackTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionAnimationBlendingSetTrackTo_getTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingSetTrackTo_initOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingSetTrackTo_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionAnimationBlendingSetTrackTo_actionOnTrack(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionEnableAnimationTrack_class;
extern JSObject *jsb_CC3ActionEnableAnimationTrack_prototype;

JSBool js_cocos3dx_CC3ActionEnableAnimationTrack_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionEnableAnimationTrack_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionEnableAnimationTrack(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionEnableAnimationTrack_getTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionEnableAnimationTrack_initOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionEnableAnimationTrack_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionEnableAnimationTrack_actionOnTrack(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionDisableAnimationTrack_class;
extern JSObject *jsb_CC3ActionDisableAnimationTrack_prototype;

JSBool js_cocos3dx_CC3ActionDisableAnimationTrack_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionDisableAnimationTrack_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionDisableAnimationTrack(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionDisableAnimationTrack_getTrackID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionDisableAnimationTrack_initOnTrack(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionDisableAnimationTrack_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionDisableAnimationTrack_actionOnTrack(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRangeLimit_class;
extern JSObject *jsb_CC3ActionRangeLimit_prototype;

JSBool js_cocos3dx_CC3ActionRangeLimit_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRangeLimit_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRangeLimit(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRangeLimit_initWithAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRangeLimit_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRangeLimit_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRangeLimit_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRangeLimit_actionWithAction(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRemove_class;
extern JSObject *jsb_CC3ActionRemove_prototype;

JSBool js_cocos3dx_CC3ActionRemove_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRemove_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRemove(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRemove_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRemove_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionCCNodeSizeTo_class;
extern JSObject *jsb_CC3ActionCCNodeSizeTo_prototype;

JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionCCNodeSizeTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionCCNodeSizeTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCCNodeSizeTo_actionWithDuration(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionSequence_class;
extern JSObject *jsb_CC3ActionSequence_prototype;

JSBool js_cocos3dx_CC3ActionSequence_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionSequence_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionSequence(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionSequence_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSequence_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSequence_stop(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSequence_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSequence_initWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSequence_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSequence_createWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionSpawn_class;
extern JSObject *jsb_CC3ActionSpawn_prototype;

JSBool js_cocos3dx_CC3ActionSpawn_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionSpawn_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionSpawn(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionSpawn_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_stop(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_initWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionSpawn_createWithTwoActions(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionDelayTime_class;
extern JSObject *jsb_CC3ActionDelayTime_prototype;

JSBool js_cocos3dx_CC3ActionDelayTime_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionDelayTime_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionDelayTime(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionDelayTime_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionDelayTime_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionDelayTime_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionDelayTime_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionBezierBy_class;
extern JSObject *jsb_CC3ActionBezierBy_prototype;

JSBool js_cocos3dx_CC3ActionBezierBy_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionBezierBy_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionBezierBy(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionBezierBy_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierBy_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierBy_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierBy_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierBy_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierBy_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionBezierTo_class;
extern JSObject *jsb_CC3ActionBezierTo_prototype;

JSBool js_cocos3dx_CC3ActionBezierTo_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionBezierTo_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionBezierTo(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionBezierTo_startWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierTo_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierTo_initWithDuration(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionBezierTo_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionInstant_class;
extern JSObject *jsb_CC3ActionInstant_prototype;

JSBool js_cocos3dx_CC3ActionInstant_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionInstant_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionInstant(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionInstant_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInstant_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInstant_step(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInstant_isDone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInstant_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionInstant_CC3ActionInstant(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionShow_class;
extern JSObject *jsb_CC3ActionShow_prototype;

JSBool js_cocos3dx_CC3ActionShow_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionShow_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionShow(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionShow_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionShow_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionShow_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionShow_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionShow_CC3ActionShow(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionHide_class;
extern JSObject *jsb_CC3ActionHide_prototype;

JSBool js_cocos3dx_CC3ActionHide_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionHide_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionHide(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionHide_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionHide_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionHide_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionHide_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionHide_CC3ActionHide(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionToggleVisibility_class;
extern JSObject *jsb_CC3ActionToggleVisibility_prototype;

JSBool js_cocos3dx_CC3ActionToggleVisibility_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionToggleVisibility_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionToggleVisibility(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionToggleVisibility_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionToggleVisibility_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionToggleVisibility_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionToggleVisibility_CC3ActionToggleVisibility(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionRemoveSelf_class;
extern JSObject *jsb_CC3ActionRemoveSelf_prototype;

JSBool js_cocos3dx_CC3ActionRemoveSelf_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionRemoveSelf_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionRemoveSelf(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionRemoveSelf_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRemoveSelf_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRemoveSelf_reverse(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRemoveSelf_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRemoveSelf_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionRemoveSelf_CC3ActionRemoveSelf(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionCallFunc_class;
extern JSObject *jsb_CC3ActionCallFunc_prototype;

JSBool js_cocos3dx_CC3ActionCallFunc_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionCallFunc_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionCallFunc(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionCallFunc_execute(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_initWithTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_getTargetCallback(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_getScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_setTargetCallback(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_create(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionCallFunc_CC3ActionCallFunc(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3NodeAnimation_class;
extern JSObject *jsb_CC3NodeAnimation_prototype;

JSBool js_cocos3dx_CC3NodeAnimation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3NodeAnimation_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3NodeAnimation(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3NodeAnimation_timeAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_getQuaternionAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_establishFrameAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_isAnimatingQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_getFrameIndexAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_establishQuaternionAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_shouldInterpolate(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_getLocationAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_getFrameCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_setShouldInterpolate(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_initWithFrameCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_establishLocationAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_establishFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_getScaleAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_isAnimatingScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_isAnimatingLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_hasVariableFrameTiming(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_establishScaleAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_animationWithFrameCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_getInterpolationEpsilon(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_setInterpolationEpsilon(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3NodeAnimation_CC3NodeAnimation(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ActionManager_class;
extern JSObject *jsb_CC3ActionManager_prototype;

JSBool js_cocos3dx_CC3ActionManager_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ActionManager_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ActionManager(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ActionManager_addAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionManager_removeAction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ActionManager_active(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ResourceNode_class;
extern JSObject *jsb_CC3ResourceNode_prototype;

JSBool js_cocos3dx_CC3ResourceNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ResourceNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ResourceNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ResourceNode_loadFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ResourceNode_initWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ResourceNode_initFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ResourceNode_populateFromResource(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ResourceNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ResourceNode_nodeFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ResourceNode_CC3ResourceNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Material_class;
extern JSObject *jsb_CC3Material_prototype;

JSBool js_cocos3dx_CC3Material_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Material_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Material(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Material_getTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setCascadeOpacityEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_removeTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_shouldApplyOpacityToColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getBlendFuncAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_addTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getEffectiveEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_updateDisplayedOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setIsOpaque(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_shouldBlendAtFullOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setDestinationBlend(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_drawTexturesWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setShininess(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_applyEffectNamedFromRez(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_shouldDrawLowAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getLightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getNameSuffix(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDestinationBlend(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getTextureCube(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_isOpaque(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDestinationBlendAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getEffectiveSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setEmissionColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getSourceBlendRGB(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getReflectivity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_isCascadeOpacityEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_drawWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getEffectiveDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setAlphaTestReference(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setSourceBlend(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getTextureCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setSourceBlendRGB(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setDiffuseColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_hasBumpMap(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setShouldDrawLowAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setReflectivity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setDestinationBlendRGB(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setShouldBlendAtFullOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getShininess(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getTextureForTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setSourceBlendAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_texturesHaveChanged(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_applyColorsWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setDestinationBlendAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_hasTextureCube(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_applyAlphaTestWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_hasTextureAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDisplayedOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setShouldUseLighting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDestinationBlendRGB(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getSourceBlendAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getSourceBlend(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setLightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setBlendFuncAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_updateDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getAlphaTestFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_hasTexturePremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_removeAllTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getAlphaTestReference(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getBlendFuncRGB(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_applyBlendWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_applyEffectNamedFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setCascadeColorEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setBlendFuncRGB(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getEffectiveAmbientColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setAlphaTestFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_isCascadeColorEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getTextureNamed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getSpecularColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_shouldUseLighting(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_shinyWhite(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_materialWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_material(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_setDefaultBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_materialWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_unbindWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_shiny(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_getDefaultBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Material_CC3Material(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Texture_class;
extern JSObject *jsb_CC3Texture_prototype;

JSBool js_cocos3dx_CC3Texture_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Texture_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Texture(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Texture_shouldFlipVerticallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_incrementTextureUnitInVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_cachedTexturesDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_replacePixels(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_shouldFlipHorizontallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getHorizontalWrappingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initCubeFromFiles(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getPixelType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getCoverage(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTextureUnitFromVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_markTextureParametersDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initCubeWithPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_ensureGLTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setMagnifyingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isPOTHeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_bindTextureParametersAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getMagnifyingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initCubeWithSideLength(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getInitialAttachmentFace(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initWithCCTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setCCTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_drawWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initCubeFromFilePattern(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setMinifyingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isTextureCube(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initWithPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getSizedContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setVerticalWrappingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_cacheCCTexture2D(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getMinifyingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTextureTarget(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initCubeColoredForAxes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTextureParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTextureID(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setTextureParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setHorizontalWrappingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_bindTextureEnvironmentWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_bindTextureContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getVerticalWrappingFunction(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getCCTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isPOT(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setTextureUnit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initWithSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getByteAlignment(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_checkTextureOrientation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setIsUpsideDown(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setShouldFlipVerticallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setLightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_hasMipmap(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setShouldFlipHorizontallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_checkGLDebugLabel(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isTexture2D(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_remove(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setHasAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getSamplerSemantic(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_resizeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setHasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_deleteGLTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_convertContent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getLightDirection(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_constructorDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isPOTWidth(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isUpsideDown(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isBumpMap(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_defaultTextureParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_removeTextureNamed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureNameFromFilePath(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setDefaultShouldFlipVerticallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_removeTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setIsPreloading(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureCubeWithPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_addTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_removeAllTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureWithPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setDefaultShouldFlipHorizontallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setShouldCacheAssociatedCCTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_getTextureNamed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_shouldCacheAssociatedCCTextures(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setShouldGenerateMipmaps(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureCubeFromFiles(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_defaultShouldFlipHorizontallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_setDefaultTextureParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_defaultShouldFlipVerticallyOnLoad(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureCubeFromFilePattern(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_textureCubeWithSideLength(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_shouldGenerateMipmaps(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_isPreloading(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture_CC3Texture(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3CCTexture_class;
extern JSObject *jsb_CC3CCTexture_prototype;

JSBool js_cocos3dx_CC3CCTexture_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3CCTexture_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3CCTexture(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3CCTexture_flipVertically(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_getPixelWidth(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_setName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_deleteImageData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_getPixelGLType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_getImageData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_getPixelGLFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_flipHorizontally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_resizeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_addToCacheWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_isUpsideDown(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_hasMipmap(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_rotateHalfCircle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_getPixelHeight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_initFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_getBytesPerPixel(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3CCTexture_texturesAreLoadedUpsideDown(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Texture2DContent_class;
extern JSObject *jsb_CC3Texture2DContent_prototype;

JSBool js_cocos3dx_CC3Texture2DContent_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Texture2DContent_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Texture2DContent(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Texture2DContent_initWithSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_flipHorizontally(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_deleteImageData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_getPixelGLType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_updatePixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_initFromCC3Texture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_getImageData(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_getPixelGLFormat(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_resizeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_isUpsideDown(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_flipVertically(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_initFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_rotateHalfCircle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_textureFromCC3Texture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Texture2DContent_CC3Texture2DContent(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODCamera_class;
extern JSObject *jsb_CC3PODCamera_prototype;

JSBool js_cocos3dx_CC3PODCamera_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODCamera_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODCamera(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODCamera_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_setPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_setPodTargetIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_clearScaleContentIn(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_setPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_getPodTargetIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_getPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_adjustQuaternionsIn(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_getPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODCamera_nodeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODResourceNode_class;
extern JSObject *jsb_CC3PODResourceNode_prototype;

JSBool js_cocos3dx_CC3PODResourceNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODResourceNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODResourceNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODResourceNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_getAnimationFrameCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_populateFromResource(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_initWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_getAnimationFrameRate(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_nodeFromFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODResourceNode_CC3PODResourceNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODLight_class;
extern JSObject *jsb_CC3PODLight_prototype;

JSBool js_cocos3dx_CC3PODLight_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODLight_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODLight(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODLight_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_setPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_setPodTargetIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_setPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_getPodTargetIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_getPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_getPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_getGlobalHomogeneousPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODLight_nodeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODMesh_class;
extern JSObject *jsb_CC3PODMesh_prototype;

JSBool js_cocos3dx_CC3PODMesh_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODMesh_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODMesh(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODMesh_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMesh_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMesh_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMesh_deprecatedAlign(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMesh_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMesh_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMesh_meshAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODNode_class;
extern JSObject *jsb_CC3PODNode_prototype;

JSBool js_cocos3dx_CC3PODNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODNode_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_setPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_setPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_addAnimationFromPODFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_addContentFromPODFile(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_getPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_getPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNode_nodeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODNodeAnimation_class;
extern JSObject *jsb_CC3PODNodeAnimation_prototype;

JSBool js_cocos3dx_CC3PODNodeAnimation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODNodeAnimation_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODNodeAnimation(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODNodeAnimation_getQuaternionAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNodeAnimation_isAnimatingQuaternion(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNodeAnimation_getLocationAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNodeAnimation_getScaleAtFrame(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNodeAnimation_isAnimatingScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNodeAnimation_isAnimatingLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODNodeAnimation_CC3PODNodeAnimation(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODMaterial_class;
extern JSObject *jsb_CC3PODMaterial_prototype;

JSBool js_cocos3dx_CC3PODMaterial_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODMaterial_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODMaterial(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODMaterial_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_getPfxEffect(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_addBumpMapTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_addTexture(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_getShininessExpansionFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_setShininessExpansionFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_materialAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMaterial_CC3PODMaterial(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3PODMeshNode_class;
extern JSObject *jsb_CC3PODMeshNode_prototype;

JSBool js_cocos3dx_CC3PODMeshNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3PODMeshNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3PODMeshNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3PODMeshNode_setPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_setPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_setMaterial(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_setPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_setPodMaterialIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_initAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_getPodParentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_getPodIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_getPodMaterialIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_getPodContentIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3PODMeshNode_nodeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_Joystick_class;
extern JSObject *jsb_Joystick_prototype;

JSBool js_cocos3dx_Joystick_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_Joystick_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_Joystick(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_Joystick_initializeEvents(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_getVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_getAngularVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_initWithThumb(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_getTouchPriority(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_setContentSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_registerWithTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_joystickWithThumb(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_Joystick_Joystick(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Particle_class;
extern JSObject *jsb_CC3Particle_prototype;

JSBool js_cocos3dx_CC3Particle_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Particle_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Particle(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Particle_updateBeforeTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setRotationVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getLifeSpan(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setParticleIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_finalizeParticle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setSizeVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getColor4B(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setCascadeOpacityEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setColor4B(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getRotationAngleVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setColor4F(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setLifeSpan(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getGlobalLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setColorVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_isCascadeOpacityEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getColor4F(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setRotationAxis(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setCascadeColorEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setRotationAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setEmitter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_updateDisplayedOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getEmitter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setRotationAngleVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getSizeVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getRotationVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getLocation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getDisplayedOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_isAlive(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getParticleIndex(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getRotationAxis(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_updateAfterTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getTimeToLive(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getRotationAngle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getColorVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_initializeParticle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_pointNormalAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setIsAlive(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_fullDescription(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_hasColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_remove(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_isCascadeColorEnabled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setVelocity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_updateDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_setSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_getRotation(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_particle(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Particle_CC3Particle(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Layer_class;
extern JSObject *jsb_CC3Layer_prototype;

JSBool js_cocos3dx_CC3Layer_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Layer_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Layer(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Layer_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getCC3Scene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_draw(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setScale(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setContentSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_description(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_shouldAlwaysUpdateViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_updateViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_handleTouchType(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_closeCC3Scene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setParent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_drawSceneWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_openCC3Scene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getCC3GestureRecognizers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setScaleY(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setScaleX(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_shouldTrackViewSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setShouldAlwaysUpdateViewport(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_update(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getRenderStreamGroupMarker(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_viewDidResizeTo(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getTouchPriority(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setPosition(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_validateAndProcessTouchAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_isRunningInActiveScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_onExit(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setShouldTrackViewSize(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_onCloseCC3Layer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getSurfaceManager(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_getMouseDelegatePriority(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_initializeControls(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_cc3RemoveAllGestureRecognizers(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_onOpenCC3Layer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_onContentSizeChanged(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setCC3Scene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_setSurfaceManager(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Layer_CC3Layer(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3Scene_class;
extern JSObject *jsb_CC3Scene_prototype;

JSBool js_cocos3dx_CC3Scene_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3Scene_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3Scene(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3Scene_checkNeedShadowVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_onOpen(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setEnvMapDrawingVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setIsRunning(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getTouchedNodePicker(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_drawSceneContentWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getTotalIllumination(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setDrawingSequenceVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_closeDepthTestWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_initializeScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getMinUpdateInterval(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getUpdateVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setMinUpdateInterval(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setDrawingSequencer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setFog(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getDeltaFrameTime(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateTimes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_close(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getMaxUpdateInterval(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_open(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setShadowVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateDrawSequence(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_pickNodeFromTapAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_pause(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getShadowVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getPerformanceStatistics(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_shouldDisplayPickingRender(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getDrawingSequencer(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_drawSceneWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_draw2DBillboardsWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setMaxUpdateInterval(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getOpacity(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getLights(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setActiveCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getEnvMapDrawingVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_isUsingDrawingSequence(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getBackdrop(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_play(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setTouchedNodePicker(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getLightProbes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_onClose(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_drawSceneContentForEnvironmentMapWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getViewDrawingVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_drawScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_didRemoveDescendant(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_collectFrameInterval(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_drawShadowsWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getAmbientLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_close3DWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_illuminateWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateRelativeLightIntensities(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_nodeSelected(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setBackdrop(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getActiveCamera(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setViewDrawingVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setPerformanceStatistics(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setColor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_didAddDescendant(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getElapsedTimeSinceOpened(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_doesContainShadows(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_isIlluminated(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_pickNodeFromTouchEvent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_activeCameraChangedFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_touchEvent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getDrawingSequenceVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getFog(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setAmbientLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_getScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_configureFogWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_descendantDidModifySequencingCriteria(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_isScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_drawBackdropWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_updateBillboards(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_open3DWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_setUpdateVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_scene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3Scene_CC3Scene(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3TouchedNodePicker_class;
extern JSObject *jsb_CC3TouchedNodePicker_prototype;

JSBool js_cocos3dx_CC3TouchedNodePicker_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3TouchedNodePicker_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3TouchedNodePicker(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3TouchedNodePicker_getPickVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_pickNodeFromTouchEvent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_pickTouchedNodeWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_initOnScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_init(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_getTouchPoint(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_getPickedNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_setPickedNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_dispatchPickedNode(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_setPickVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_pickerOnScene(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3TouchedNodePicker_CC3TouchedNodePicker(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3ShadowVolumeMeshNode_class;
extern JSObject *jsb_CC3ShadowVolumeMeshNode_prototype;

JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3ShadowVolumeMeshNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3ShadowVolumeMeshNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowExpansionLimitFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_defaultBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldShadowBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_populateFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldDrawDescriptor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_nodeWasDestroyed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowCaster(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldDrawLocalContentWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldDrawWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_createShadowMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldShadowFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldDrawTerminator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_checkShadowMaterial(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShadowVolumeVertexOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_processUpdateBeforeTransform(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowLagCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldDrawLocalContentWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShadowLagCount(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setParent(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_populateShadowMesh(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldShadowBackFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_addShadowVolumeSideFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowLagFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_configureDrawingParameters(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_isReadyToUpdate(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShadowLagFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldDrawTerminator(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShadowOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldAddShadowVolumeEndCapsOnlyWhenNeeded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_markTransformDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_isShadowVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_useDepthFailAlgorithm(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_isTouchable(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_wasRemoved(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_addShadowVolumeCapFor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldContributeToParentBoundingBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_isShadowDirty(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_updateStencilAlgorithm(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_drawToStencilIncrementing(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_drawToStencilWithVisitor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_hasShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldAddShadowVolumeEndCapsOnlyWhenNeeded(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowVolumeVertexOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_expand(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shadowOffsetUnits(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldIncludeInDeepCopy(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_addTerminatorLineFrom(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldDrawWireframeBox(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_isShadowVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_addShadowVolumesForLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldDrawBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShadowExpansionLimitFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_updateShadow(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_getShadowVolumeVertexOffsetForLightAt(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_hasShadowVolumes(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_initWithTag(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShouldDrawBoundingVolume(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setShadowOffsetFactor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldShadowFrontFaces(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_nodeWasTransformed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_shouldDrawDescriptor(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_setDefaultVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_defaultVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3ShadowVolumeMeshNode_CC3ShadowVolumeMeshNode(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CC3StencilledShadowPainterNode_class;
extern JSObject *jsb_CC3StencilledShadowPainterNode_prototype;

JSBool js_cocos3dx_CC3StencilledShadowPainterNode_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_cocos3dx_CC3StencilledShadowPainterNode_finalize(JSContext *cx, JSObject *obj);
void js_register_cocos3dx_CC3StencilledShadowPainterNode(JSContext *cx, JSObject *global);
void register_all_cocos3dx(JSContext* cx, JSObject* obj);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_setLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_getLight(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_updateShadow(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_nodeWasDestroyed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_isShadowVisible(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_nodeWasTransformed(JSContext *cx, uint32_t argc, jsval *vp);
JSBool js_cocos3dx_CC3StencilledShadowPainterNode_nodeWithName(JSContext *cx, uint32_t argc, jsval *vp);
#endif

