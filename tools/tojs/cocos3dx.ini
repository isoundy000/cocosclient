[cocos3dx]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos3dx

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc3

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.1/include 
clang_flags = -nostdinc -x c++

cocos_headers = -I%(cocosdir)s/cocos2dx/include -I%(cocosdir)s/external/libcocos3dx -I%(cocosdir)s/cocos2dx/platform -I%(cocosdir)s/cocos2dx/platform/android -I%(cocosdir)s/cocos2dx -I%(cocosdir)s/cocos2dx/kazmath/include -I%(cocosdir)s/extensions 
cocos_flags = -DANDROID -DCOCOS2D_JAVASCRIPT

cxxgenerator_headers = -I%(cxxgeneratordir)s/targets/spidermonkey/common

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s 

# what headers to parse
headers = %(cocosdir)s/external/libcocos3dx/cocos3d.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^CCMenu*$".
classes = CC3Action.* CC3RepeatForever CC3Node CC3MeshNode CC3NodeAnimation CC3Vector CC3Vector4 Joystick CC3Material CC3Texture CC3CCTexture CC3Texture2DContent CC3Matrix CC3Mesh CC3VertexArray CC3SoftBodyNode CC3SkinMeshNode CC3SkinSection CC3Bone CC3BitmapFontConfiguration CC3BitmapLabelNode CC3Camera CC3Frustum CC3EnvironmentNode CC3LightProbe CC3Light CC3LightCameraBridgeVolume CC3ShadowCastingVolume CC3CameraShadowVolume CC3LocalContentNode CC3PlaneNode CC3BoxNode CC3SimpleLineNode CC3TouchBox CC3SphereNode CC3ClipSpaceNode CC3Backdrop CC3Fog CC3Particle CC3Layer CC3Scene CC3TouchedNodePicker CC3ShadowVolumeMeshNode CC3StencilledShadowPainterNode CC3PODMeshNode CC3PODNode CC3PODNodeAnimation CC3PODMesh CC3PODMaterial CC3PODLight CC3PODCamera CC3Identifiable CC3Cacheable CC3BoundingVolume CC3LineNode CC3ResourceNode CC3PODResourceNode CC3AffineMatrix

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = CC3Node::[getTransformListeners getNodePODStructAtIndex],
		CC3Vector::[*],
		CC3Vector4::[*],
		CC3Texture::[textureWithSize textureWithCCTexture textureCubeColoredForAxes],
		CC3Frustum::[getVertices],
		CC3ShadowCastingVolume::[getVertices],
		CC3CameraShadowVolume::[getVertices],
		CC3BoundingVolume::[getVertices],
		CC3MeshNode::[getNodePODStructAtIndex],
		CC3PODMeshNode::[getNodePODStructAtIndex],
		CC3PODLight::[getNodePODStructAtIndex],
		CC3PODCamera::[getNodePODStructAtIndex],
		CC3PODResource::[shouldAutoBuild setShouldAutoBuild getAmbientLight getBackgroundColor getTextures getMaterials getMeshes getNodePODStructAtIndex getCameraNodePODStructAtIndex getLightNodePODStructAtIndex getMeshNodePODStructAtIndex getCameraPODStructAtIndex getLightPODStructAtIndex getPvrtModel getMaterialPODStructAtIndex getMeshPODStructAtIndex getTexturePODStructAtIndex],
		CC3Light::[getShadows],
		CC3NodeVisitor::[shouldVisitChildren setShouldVisitChildren],
		CC3TouchBox::[shouldAlwaysMeasureParentBoundingBox setShouldAlwaysMeasureParentBoundingBox],
		CC3Billboard::[setShouldAlwaysMeasureBillboardBoundingRect setShouldMaximizeBillboardBoundingRect setUnityScaleDistance setMinimumBillboardScale setMaximumBillboardScale setOffsetPosition]
		

rename_functions = 

rename_classes = 

# for all class names, should we remove something when registering in the target VM?
remove_prefix = 

# classes for which there will be no "parent" lookup
classes_have_no_parents =  

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =  CCObject

# classes that create no constructor
# CCSet is special and we will use a hand-written constructor
abstract_classes = 

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

